//
//
//  Created by CloudCraze, LLC.
//  Copyright 2010 CloudCraze, LLC. All rights reserved.
//
//  Redistribution and use in source or binary forms, with or without 
//  modification is PROHIBITED.
//
//
/*
 *  OrderListController supports the "Orders" section of the My Account pages. 
*/ 
global with sharing class cc_ctrl_MyOrderList extends cc_hlpr_Paginator implements al.ObjectPaginatorListener  {
	public cc_ctrl_MyOrderList getMyOrderController() { return this; }
	public cc_ctrl_MyAccount myAccountController { get; set; }
	//==================================================
    // CONSTANTS
    //==================================================
    // Pagination settings
    public final Integer MAX_RECORDS = 5;
    //==================================================
    // INSTANCE VARIABLES 
    //==================================================
    // List of orders generated by a search or a query/list all
    public List<cc_bean_MyOrderItem> orderList = new List<cc_bean_MyOrderItem>();
    //==================================================
    // CONSTRUCTOR
    //==================================================
    public cc_ctrl_MyOrderList(){
		this.paginate = false;
        pageOrders = new List<cc_bean_MyOrderItem>();
    }
    
    //==================================================
    // INSTANCE PROPERTIES
    //==================================================
    public List<cc_bean_MyOrderItem> pageOrders {get;private set;}
    public cc_bean_MyOrderItem selectedOrder {get;private set;}
    // Search fields -- dateProxy in cc_ctrl_MyAccount is used for toDate and fromDate
    public String status {get;set;}
    public boolean paginate { 
        get {
			return true;
        }
        set;
    }

    public String selectedOrderNumber {get;
        set {
            if(value == null){
                selectedOrder = null;
                selectedOrderNumber = null;
            }else{
            	selectedOrderNumber = value;
            }
        }
    }
    public String poNumber {get;set;}
    
    
    public List<SelectOption> statusCodes {
        get {
            List<SelectOption> optionList = new List<SelectOption>();
/*            
            // Query the database for E_Code__c objects that are type==CartStatus
            List<E_Code__c> codes = [ select Decode__c from E_Code__c where CodeType__c = 'OrderStatus' order by Code__c];
            // Create SelectOption objects for each code

            SelectOption o = new SelectOption(myaccount.ALL, myaccount.ALL, false);
            optionList.add(o);

            for(E_Code__c code: codes){         
                o = new SelectOption(code.Decode__c, code.Decode__c, false);
                optionList.add(o);
            }
*/            
            // Return the list of SelectOptions
            return optionList;
        }
        set;
        
    }
    
    //==================================================
    // HELPER METHODS
    //==================================================    
    public List<cc_bean_MyOrderItem> getOrderList(){
        if(paginator == null){
            queryOrders(null);
        }
        
        if(paginate){
            //System.debug('-----cc_ctrl_MyOrderList.getOrderList-pageOrders : ' + pageOrders);
            return pageOrders;
        }
        else {
            Integer listSize = MAX_RECORDS;
            List<cc_bean_MyOrderItem> shortList = new List<cc_bean_MyOrderItem>();

            if(listSize > paginator.all.size()){
                listSize = paginator.all.size();
            }
            for(Integer i = 0; i < listSize; i++){
                shortList.add((cc_bean_MyOrderItem)paginator.all.get(i));
            }
            //System.debug('-----cc_ctrl_MyOrderList.getOrderList-shortList : ' + shortList);
            return shortList;
        }
    }
    
    public List<cc_bean_MockOrder> getMockOrderList(){
    	List<cc_bean_MockOrder> mockOrders = new List<cc_bean_MockOrder> ();
        if(paginator == null){
            queryOrders(null);
        }
        
        if(paginate){
            //System.debug('-----cc_ctrl_MyOrderList.getOrderList-pageOrders : ' + pageOrders);
            if(pageOrders != null)
            {
	            for(cc_bean_MyOrderItem oi : pageOrders) {
	            	mockOrders.add(new cc_bean_MockOrder(oi));
	            }
            }
            
        }
        else {
            Integer listSize = MAX_RECORDS;
            List<cc_bean_MyOrderItem> shortList = new List<cc_bean_MyOrderItem>();

            if(listSize > paginator.all.size()){
                listSize = paginator.all.size();
            }
            for(Integer i = 0; i < listSize; i++){
                mockOrders.add(new cc_bean_MockOrder((cc_bean_MyOrderItem)paginator.all.get(i)));
            }
            //System.debug('-----cc_ctrl_MyOrderList.getOrderList-shortList : ' + shortList);
           
        }
        return mockOrders;
    }

    global void handlePageChange(List<Object> newPage){
            pageOrders.clear();
            
            // Get all the productCategoryList objects
            // Update the  list of records that should be returned (set them in the paginator)
            if(paginator.page != null){
                for(Object o: paginator.page){
                    pageOrders.add((cc_bean_MyOrderItem)o);
                }
            }

    }
    
    
    /**
     * Get and set the order list for the current user.  If the user is not signed in no
     * orders will be made available
     */
    public void queryOrders (String orderId) {
        orderList.clear();
        
            
            // Get the current user
            //ID portalUserID = al.UserUtils.getCurrentUserPortalAccountID();
            
            // Query for orders for the current user
            // TODO - PONumber doesn't seem to exist - is it in a related object?
            //if(portalUserID != null){
                // TODO -- make this for only the current user
                String query = 'select ID, '
                    + 'Name,' 
                    + 'EncryptedID__c,'
                    + 'OrderDate__c, '
                    + 'OrderId__c, '
                    + 'TotalAmount__c, '
                    + 'OrderStatus__c,'
                    + 'LastModifiedDate,'
                    + 'PaymentMethod__c,'
                    + 'ShippingMethod__c,'
// Below here is only necessary for summary
                    + 'ShipDate__c,' 
                    + 'DeliveryDate__c,'
                    + 'RequestDate__c,'
                    + 'SubtotalAmount__c,'
                    + 'TotalSurcharge__c,'
                    + 'TotalDiscount__c,'
                    + 'ShipAmount__c,'
                    + 'TotalShipDiscount__c,'
                    + 'ExtShipTrackNo__c, ' 
                    + 'BillTo__r.FirstName__c,'
                    + 'BillTo__r.MiddleName__c,'
                    + 'BillTo__r.LastName__c,'
                    + 'BillTo__r.AddressFirstline__c,'
                    + 'BillTo__r.AddressSecondline__c,'
                    + 'BillTo__r.City__c,'   
                    + 'BillTo__r.StateISOCode__c,'       
                    + 'BillTo__r.PostalCode__c,'
                    + 'BillTo__r.AddressThirdline__c,'
                    + 'BillTo__r.Country__c,'
                    + 'BillTo__r.CountryISOCode__c,'
                    + 'BillTo__r.DaytimePhone__c,'
                    + 'BillTo__r.Email__c,'
                    + 'BillTo__r.HomePhone__c,'
                    + 'BillTo__r.CompanyName__c,'
                    + 'BillTo__r.MailStop__c,'
                    + 'BillTo__r.State__c,'
                    + 'ShipTo__r.FirstName__c,'
                    + 'ShipTo__r.MiddleName__c,'
                    + 'ShipTo__r.LastName__c,'
                    + 'ShipTo__r.AddressFirstline__c,'
                    + 'ShipTo__r.AddressSecondline__c,'
                    + 'ShipTo__r.City__c,'          
                    + 'ShipTo__r.StateISOCode__c,'       
                    + 'ShipTo__r.PostalCode__c,'
                    + 'ShipTo__r.AddressThirdline__c,'
                    + 'ShipTo__r.Country__c,'
                    + 'ShipTo__r.CountryISOCode__c,'
                    + 'ShipTo__r.DaytimePhone__c,'
                    + 'ShipTo__r.Email__c,'
                    + 'ShipTo__r.HomePhone__c,'
                    + 'ShipTo__r.CompanyName__c,'
                    + 'ShipTo__r.MailStop__c,'
                    + 'ShipTo__r.State__c';

                query += ' from E_Order__c Where OwnerId = '+'\''+UserInfo.getUserId()+'\'';
                //query += ' and OrderStatus__c != \'Bill Of Material\'';
                


                List<E_Order__c> myOrders;
                if(orderId != null && orderId.length() > 0){
                    query += ' and ID = \'' + orderId + '\'';
                }
                query += ' order by Name desc';
                System.debug('############ Order query: ' + query);
                myOrders = Database.query(query);
                //System.debug('-----cc_ctrl_MyOrderList.queryOrders-myOrders : ' + myOrders);
                buildOrderListFromResults(myOrders);
            //} 
    } 
    
    public void displayOrderSummary(){
        queryOrders(selectedOrderNumber);
        if(orderList != null && orderList.size() > 0){
            selectedOrder = orderList[0];
            
            // Get the OrderItems for this order
            String query = 'select '
                + 'Product__c,'
                + 'Product__r.Name,'
                + 'Quantity__c,'
                + 'Price__c,'
                + 'SubAmount__c' 
                + ' from E_OrderItem__c where Order__c = \'' + selectedOrder.order.Id +'\'';
            List<E_OrderItem__c> orderItems = Database.query(query);
            selectedOrder.orderItems = orderItems;
        }
    }
    
        public void buildOrderListFromResults(List<E_Order__c> orders){
                cc_bean_MyOrderItem item;
                for(E_Order__c order: orders){
                    if (al.StringUtils.isNotBlank(order.EncryptedID__c)) {
                        item = new cc_bean_MyOrderItem();
                        item.order = order;
                        item.billingAddress = order.BillTo__r;
                        item.shippingAddress = order.ShipTo__r;
                        //item.mockBillingAddress=new cc_bean_MockContactAddress(order.BillTo__r);
                        //item.mockShippingAddress=new cc_bean_MockContactAddress(order.ShipTo__r);
                        orderList.add(item);                        
                    }
                }
            //System.debug('-----cc_ctrl_MyOrderList.buildOrderListFromResults-orderList : ' + orderList);
            paginator = new al.ObjectPaginator((al.ObjectPaginatorListener)this);
            paginator.setRecords((List<Object>)orderList);
        }
        
        public void searchOrders(){
            // Clear the cart list
            orderList.clear();
            
            // Get the base query
            String query = 'select ID, '
                    + 'Name,'
                    + 'EncryptedID__c,'
                    + 'OrderDate__c, '
                    + 'OrderId__c, '
                    + 'TotalAmount__c, '
                    + 'OrderStatus__c,'
                    + 'LastModifiedDate,'
// Below here is only necessary for summary
                    + 'ShipDate__c,' 
                    + 'DeliveryDate__c,'
                    + 'RequestDate__c,'
                    + 'SubtotalAmount__c,'
                    + 'TotalSurcharge__c,'
                    + 'TotalDiscount__c,'
                    + 'ShipAmount__c,'
                    + 'TotalShipDiscount__c,'
                    + 'BillTo__r.FirstName__c,'
                    + 'BillTo__r.MiddleName__c,'
                    + 'BillTo__r.LastName__c,'
                    + 'BillTo__r.AddressFirstline__c,'
                    + 'BillTo__r.AddressSecondline__c,'
                    + 'BillTo__r.City__c,'   
                    + 'BillTo__r.StateISOCode__c,'       
                    + 'BillTo__r.PostalCode__c,'
                    + 'ShipTo__r.FirstName__c,'
                    + 'ShipTo__r.MiddleName__c,'
                    + 'ShipTo__r.LastName__c,'
                    + 'ShipTo__r.AddressFirstline__c,'
                    + 'ShipTo__r.AddressSecondline__c,'
                    + 'ShipTo__r.City__c,'          
                    + 'ShipTo__r.StateISOCode__c,'       
                    + 'ShipTo__r.PostalCode__c';
                query += ' from E_Order__c';





            
            // Build the 'where' clause
            String whereClause = '';
            
            // Add cart number clause
            if(selectedOrderNumber != null && selectedOrderNumber.length() > 0){
                    whereClause += ' OrderId__c=\'' + selectedOrderNumber + '\' ';
            }
            
            // TODO
            // Add PO number clause
            //if(cartName != null && cartName.length() > 0){
            //      if(whereClause.length() > 0){
            //          whereClause += ' and';
            //      }               
            //      whereClause += ' Name=\'' + cartName + '\'';
            //}
            
            // Add status clause
            if(status != null && status.length() > 0 && !status.equals(myAccountController.ALL)){
                    if(whereClause.length() > 0){
                        whereClause += ' and';
                    }               
                    whereClause += ' OrderStatus__c=\'' + status + '\'';                    
            }

            // Add from date
            String fromDate = myAccountController.getDateQueryFormat(myAccountController.dateProxy.RequestDate__c);
            if(fromDate != null){
                if(whereClause.length() > 0){
                    whereClause += ' and';
                }
                whereClause += ' OrderDate__c >= ' + fromDate;
            }
            
            
            // Add to date
            
            String toDate = myAccountController.getDateQueryFormat(myAccountController.dateProxy.DeliveryDate__c);
//          if(myaccount.dateProxy.DeliveryDate__c != null){
//          String toDate = myaccount.dateProxy.DeliveryDate__c.format('yyyy-MM-dd');
            if(toDate != null){
                if(whereClause.length() > 0){
                    whereClause += ' and';
                }
                
                whereClause += ' OrderDate__c <= ' + toDate;
            }
            
            // Set the limit
            if(whereClause.length() > 0){
                query += ' where ' +whereClause + ' LIMIT 1000';
            }
            System.debug('------- ORDERLIST QUERY: ' + query);
            
            // Run the query
            List<E_Order__c> myOrders = Database.query(query);
            
            //List<E_Order__c> myOrders = (List<cc_bean_MyOrderItem>)results;
            buildOrderListFromResults(myOrders);
        }
    
}